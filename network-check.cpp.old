// Internal
#include "network-check.h"
// External
#include <arpa/inet.h>
#include <cstring>
#include <ifaddrs.h>
#include <iostream>
#include <netdb.h>
#include <net/if.h>
#include <netinet/in.h>
#include <string>
#include <sys/socket.h>
#include <sys/types.h>



void fetchNetInterfacesInfo(NetInterfaceQuery & niq) {
  // Address Structs
  struct ifaddrs * interfaces = nullptr;
  struct ifaddrs * ifa = nullptr;

  // Get a list of all network interfaces
  if (getifaddrs(&interfaces) == -1) {
    std::cerr << "Error getting network interfaces" << std::endl;
    return;
  }

  // Iterate through each Interface
  for (ifa = interfaces; ifa != nullptr; ifa = ifa->ifa_next) {
    // Failed Address
    if (ifa->ifa_addr == nullptr)
      continue;
    // Counting Family Accounts
    niq.mappings[ifa -> ifa_addr -> sa_family] += 1;
  }

  // Clean up
  if (interfaces != nullptr) {
    freeifaddrs(interfaces);
  }
  
  niq.mainIPInterfaceName = "Test123";
  niq.mainIPAddress = getPrimaryIpAddress();
}

std::string getPrimaryIpAddress() {
    struct ifaddrs *interfaces = nullptr;
    struct ifaddrs *ifa = nullptr;
    void *tmpAddrPtr = nullptr;
    std::string primaryIp = "";

    // Get a list of all interfaces on the machine
    if (getifaddrs(&interfaces) == -1) {
        perror("getifaddrs failed");
        return "";
    }

    // Loop through the list of interfaces
    for (ifa = interfaces; ifa != nullptr; ifa = ifa->ifa_next) {
        if (ifa->ifa_addr != nullptr) {
            // Check if the interface is IPv4
            if (ifa->ifa_addr->sa_family == AF_INET) {
                tmpAddrPtr = &((struct sockaddr_in *)ifa->ifa_addr)->sin_addr;

                // Convert the IP address to a string
                char addressBuffer[INET_ADDRSTRLEN];
                if (inet_ntop(AF_INET, tmpAddrPtr, addressBuffer, INET_ADDRSTRLEN) != nullptr) {
                    // Optionally, you can filter for the primary interface here
                    if (primaryIp.empty() && !(ifa->ifa_flags & IFF_LOOPBACK)) {
                        primaryIp = addressBuffer;
                    }
                }
            }
        }
    }

    // Free the memory allocated by getifaddrs
    if (interfaces != nullptr) {
        freeifaddrs(interfaces);
    }

    return primaryIp;
}

